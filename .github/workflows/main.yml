name: Docker+Terraform+Kubernetes+Helm

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/destroy.yml' 
      - 'variables.tf'
      - 'outputs.tf'

env:
  AWS_REGION: us-east-1

jobs:
  create_push_image_to_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t challenge .
          docker tag challenge:latest ${{ secrets.DOCKER_USERNAME }}/challenge:latest    
          docker push ${{ secrets.DOCKER_USERNAME }}/challenge:latest

  terraform_to_provision_infra:
    needs: create_push_image_to_docker_hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          terraform init -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}" \
                        -backend-config="key=terraform.tfstate" \
                        -backend-config="region=${{ env.AWS_REGION }}"
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Capture Terraform Outputs
        run: |
          set -e
          terraform output -raw master_node_ip > master_ip.txt
          terraform output -raw worker_node_ips > worker_ips.txt
          terraform output -raw master_private_ip > master_private_ip.txt
          terraform output -raw worker_private_ips > worker_private_ips.txt
          echo "Terraform outputs saved."

      - name: Upload Terraform Output Files
        uses: actions/upload-artifact@v4
        with:
          name: terraform_outputs
          path: |
            master_ip.txt
            worker_ips.txt
            master_private_ip.txt
            worker_private_ips.txt

  setup_k3s_and_helm:
    needs: terraform_to_provision_infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform Output Files
        uses: actions/download-artifact@v4
        with:
          name: terraform_outputs

      - name: Read Terraform Outputs
        run: |
          MASTER_IP=$(cat master_ip.txt)
          WORKER_IPS=$(cat worker_ips.txt)
          MASTER_PRIVATE_IP=$(cat master_private_ip.txt)
          WORKER_PRIVATE_IPS=$(cat worker_private_ips.txt)

          echo "MASTER_IP=$MASTER_IP"
          echo "WORKER_IPS=$WORKER_IPS"
          echo "MASTER_PRIVATE_IP=$MASTER_PRIVATE_IP"
          echo "WORKER_PRIVATE_IPS=$WORKER_PRIVATE_IPS"

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Install K3s on Master Node
        run: |
          MASTER_IP=$(cat master_ip.txt)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP << 'EOF'
            set -e
            curl -sfL https://get.k3s.io | sh -
            sudo chmod 644 /etc/rancher/k3s/k3s.yaml
            echo "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml" >> ~/.bashrc
            source ~/.bashrc
          EOF

      - name: Install K3s on Worker Nodes
        run: |
          MASTER_IP=$(cat master_ip.txt)
          MASTER_PRIVATE_IP=$(cat master_private_ip.txt)
          WORKER_IPS=$(cat worker_ips.txt)
          
          K3S_TOKEN=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "sudo cat /var/lib/rancher/k3s/server/node-token")

          for WORKER_IP in $(echo $WORKER_IPS | tr "," "\n"); do
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$WORKER_IP << EOF
              set -e
              curl -sfL https://get.k3s.io | K3S_URL=https://${MASTER_PRIVATE_IP}:6443 K3S_TOKEN=$K3S_TOKEN sh -
          EOF
          done

      - name: Copy k3s.yaml to GitHub Runner
        run: |
          MASTER_IP=$(cat master_ip.txt)
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP:/etc/rancher/k3s/k3s.yaml ./k3s.yaml
          sed -i "s|127.0.0.1|$(cat master_private_ip.txt)|" k3s.yaml

      - name: Copy k3s.yaml to Worker Nodes
        run: |
          WORKER_IPS=$(cat worker_ips.txt)
          for WORKER_IP in $(echo $WORKER_IPS | tr "," "\n"); do
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$WORKER_IP "mkdir -p /home/ubuntu/.kube"
            scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ./k3s.yaml ubuntu@$WORKER_IP:/home/ubuntu/.kube/k3s.yaml
          done

      - name: Verify Worker Nodes in Cluster
        run: |
          MASTER_IP=$(cat master_ip.txt)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "kubectl get nodes"

      - name: Install Helm on Master Node
        run: |
          MASTER_IP=$(cat master_ip.txt)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP << 'EOF'
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          EOF

      - name: Deploy Helm Chart
        run: |
          MASTER_IP=$(cat master_ip.txt)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP << 'EOF'
            set -e
            git clone https://github.com/ma914372/devops-coding-challenge.git
            cd devops-coding-challenge
            RANDOM_PASSWORD=$(openssl rand -base64 16)
            kubectl create namespace mysql-namespace --dry-run=client -o yaml | kubectl apply -f -
            kubectl create secret generic mysql-secret --from-literal=rootPassword=$RANDOM_PASSWORD -n mysql-namespace --dry-run=client -o yaml | kubectl apply -f -
            helm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update
            helm dependency update ./app
            helm install app ./app \
              --namespace app \
              --create-namespace \
              --kubeconfig /etc/rancher/k3s/k3s.yaml \
              --set mysql.auth.rootPassword=$RANDOM_PASSWORD \
              --set app.env.SPRING_DATASOURCE_PASSWORD=$RANDOM_PASSWORD \
              --set mysql.secretName=mysql-secret \
              --set mysql.namespace=mysql-namespace
          EOF

      - name: Verify Deployment
        run: |
          MASTER_IP=$(cat master_ip.txt)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "kubectl get pods -A"
